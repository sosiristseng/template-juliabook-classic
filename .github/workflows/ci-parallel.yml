name: Build Jupyter Notebooks

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  JULIA_DEPOT_PATH: '~/.julia'
  JULIA_NUM_THREADS: 'auto'
  JULIA_CACHE_NUM: '1'
  TIMEOUT: 600
  JOBS: '1'
  PYTHON_VER: '3.11'

jobs:
  jupyter-book:
    runs-on: ubuntu-latest
    outputs:
      skip_deploy: ${{ steps.skipdeploy.outputs.skip_deploy }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install ffmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2
        id: setup-ffmpeg
      - name: Setup Python ${{ env.PYTHON_VER }}
        uses: actions/setup-python@v4
        id: python
        with:
          python-version: ${{ env.PYTHON_VER }}
      - name: Install Python dependencies
        run: |
          pip install -U jupyter-book nbconvert
          pip install -r requirements.txt
      - name: Read Julia version
        uses: SebRollen/toml-action@v1.0.2
        id: read_toml
        with:
          file: 'Manifest.toml'
          field: 'julia_version'
      - name: Save Julia version
        run: echo "jlver=${{ steps.read_toml.outputs.value }}" >> $GITHUB_ENV
      - name: Setup Julia ${{ env.jlver }}
        uses: julia-actions/setup-julia@v1
        with:
          version: ${{ env.jlver }}
      - name: Cache Julia dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.JULIA_DEPOT_PATH }}
          key: ${{ runner.os }}-julia-${{ env.JULIA_CACHE_NUM }}-${{ hashFiles('**/Manifest.toml') }}
          restore-keys: |
            ${{ runner.os }}-julia-${{ env.JULIA_CACHE_NUM }}-
      - name: Install Julia dependencies
        env:
          PYTHON: ${{ steps.python.outputs.python-path }}
        run: |
          julia --color=yes --project="" -e 'import Pkg; Pkg.add("IJulia"); using IJulia; installkernel("Julia", "--project=@.")'
          julia --color=yes --project=@. -e 'import Pkg; Pkg.instantiate(); Pkg.resolve(); Pkg.precompile()'
      - name: Build notebooks
        run: >
          parallel --joblog /tmp/log -j${{ env.JOBS }}
          jupyter nbconvert --to notebook
          --ExecutePreprocessor.timeout=${{ env.TIMEOUT }}
          --ExecutePreprocessor.kernel_name=julia-$(julia -e 'print(VERSION.major,".",VERSION.minor)')
          --execute --inplace
          {} ::: docs/*.ipynb
      - name: Display execution stats
        run: cat /tmp/log
      - name: Build website
        run: jupyter-book build docs/
      - name: Skip deploy if matrix workflow file exists
        id: skipdeploy
        run: |
          if test -f '.github/workflows/ci-matrix.yml'; then
              echo 'skip_deploy=true' >> $GITHUB_OUTPUT
          fi
      - name: Upload pages artifact
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/upload-pages-artifact@v1
        with:
          path: docs/_build/html

  # Deployment job
  deploy:
    needs: jupyter-book
    if: ${{ github.ref == 'refs/heads/main' && needs.jupyter-book.outputs.skip_deploy != 'true' }}
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
